"{\"project_description\":\"build a website that fetches and tracks fitness progress with timezone information\",\"project_scope\":{\"is_crud_required\":true,\"is_user_login_and_logout\":true,\"is_external_urls_required\":true},\"external_urls\":[\"https://wger.de/api/v2/exercise\",\"https://wger.de/api/v2/exercisecategory\",\"https://wger.de/api/v2/muscle\"],\"backend_code\":\"use actix_cors::Cors;\\nuse actix_web::{http::header, web, App, HttpServer, Responder, HttpResponse};\\nuse reqwest::Client;\\nuse serde::{Deserialize, Serialize};\\nuse std::sync::Mutex;\\nuse std::collections::HashMap;\\nuse std::fs;\\nuse std::io::Write;\\n\\n#[derive(Serialize, Deserialize, Debug, Clone)]\\npub struct FitnessProgress {\\n    pub id: u64,\\n    pub user_id: u64,\\n    pub timezone: String,\\n    pub progress: String,\\n    pub timestamp: String,\\n}\\n\\n#[derive(Serialize, Deserialize, Debug, Clone)]\\npub struct User {\\n    pub id: u64,\\n    pub username: String,\\n    pub password: String,\\n}\\n\\n#[derive(Serialize, Deserialize, Debug, Clone)]\\nstruct Database {\\n    fitness_progress: HashMap<u64, FitnessProgress>,\\n    users: HashMap<u64, User>,\\n}\\n\\nimpl Database {\\n    fn new() -> Self {\\n        Self {\\n            fitness_progress: HashMap::new(),\\n            users: HashMap::new(),\\n        }\\n    }\\n\\n    // FITNESS PROGRESS DATA RELATED\\n    fn insert_fitness_progress(&mut self, progress: FitnessProgress) {\\n        self.fitness_progress.insert(progress.id, progress);\\n    }\\n\\n    fn get_fitness_progress(&self, id: &u64) -> Option<&FitnessProgress> {\\n        self.fitness_progress.get(id)\\n    }\\n\\n    fn get_all_fitness_progress(&self) -> Vec<&FitnessProgress> {\\n        self.fitness_progress.values().collect()\\n    }\\n\\n    fn delete_fitness_progress(&mut self, id: &u64) {\\n        self.fitness_progress.remove(id);\\n    }\\n\\n    fn update_fitness_progress(&mut self, progress: FitnessProgress) {\\n        self.fitness_progress.insert(progress.id, progress);\\n    }\\n\\n    // USER DATA RELATED FUNCTIONS\\n    fn insert_user(&mut self, user: User) {\\n        self.users.insert(user.id, user);\\n    }\\n\\n    fn get_user_by_name(&self, username: &str) -> Option<&User> {\\n        self.users.values().find(|u| u.username == username)\\n    }\\n\\n    // DATABASE SAVING\\n    fn save_to_file(&self) -> std::io::Result<()> {\\n        let data = serde_json::to_string(&self)?;\\n        let mut file = fs::File::create(\\\"database.json\\\")?;\\n        file.write_all(data.as_bytes())?;\\n        Ok(())\\n    }\\n\\n    fn load_from_file() -> std::io::Result<Self> {\\n        let file_content = fs::read_to_string(\\\"database.json\\\")?;\\n        let db: Database = serde_json::from_str(&file_content)?;\\n        Ok(db)\\n    }\\n}\\n\\nstruct AppState {\\n    db: Mutex<Database>,\\n    client: Client,\\n}\\n\\n#[derive(Serialize, Deserialize)]\\nstruct ExerciseData {\\n    id: u64,\\n    name: String,\\n}\\n\\nasync fn fetch_exercise_data(client: web::Data<Client>) -> impl Responder {\\n    if let Ok(response) = client.get(\\\"https://wger.de/api/v2/exercise\\\").send().await {\\n        let exercise_data: Vec<ExerciseData> = response.json().await.unwrap_or_else(|_| vec![]);\\n        HttpResponse::Ok().json(exercise_data)\\n    } else {\\n        HttpResponse::InternalServerError().finish()\\n    }\\n}\\n\\nasync fn create_fitness_progress(app_state: web::Data<AppState>, progress: web::Json<FitnessProgress>) -> impl Responder {\\n    let mut db = app_state.db.lock().unwrap();\\n    db.insert_fitness_progress(progress.into_inner());\\n    let _ = db.save_to_file();\\n    HttpResponse::Ok().finish()\\n}\\n\\nasync fn read_fitness_progress(app_state: web::Data<AppState>, id: web::Path<u64>) -> impl Responder {\\n    let db = app_state.db.lock().unwrap();\\n    match db.get_fitness_progress(&id.into_inner()) {\\n        Some(progress) => HttpResponse::Ok().json(progress),\\n        None => HttpResponse::NotFound().finish(),\\n    }\\n}\\n\\nasync fn read_all_fitness_progress(app_state: web::Data<AppState>) -> impl Responder {\\n    let db = app_state.db.lock().unwrap();\\n    let fitness_progress = db.get_all_fitness_progress();\\n    HttpResponse::Ok().json(fitness_progress)\\n}\\n\\nasync fn update_fitness_progress(app_state: web::Data<AppState>, progress: web::Json<FitnessProgress>) -> impl Responder {\\n    let mut db = app_state.db.lock().unwrap();\\n    db.update_fitness_progress(progress.into_inner());\\n    let _ = db.save_to_file();\\n    HttpResponse::Ok().finish()\\n}\\n\\nasync fn delete_fitness_progress(app_state: web::Data<AppState>, id: web::Path<u64>) -> impl Responder {\\n    let mut db = app_state.db.lock().unwrap();\\n    db.delete_fitness_progress(&id.into_inner());\\n    let _ = db.save_to_file();\\n    HttpResponse::Ok().finish()\\n}\\n\\nasync fn register(app_state: web::Data<AppState>, user: web::Json<User>) -> impl Responder {\\n    let mut db = app_state.db.lock().unwrap();\\n    db.insert_user(user.into_inner());\\n    let _ = db.save_to_file();\\n    HttpResponse::Ok().finish()\\n}\\n\\nasync fn login(app_state: web::Data<AppState>, user: web::Json<User>) -> impl Responder {\\n    let db = app_state.db.lock().unwrap();\\n    \\n    match db.get_user_by_name(&user.username) {\\n        Some(stored_user) if stored_user.password == user.password => {\\n            HttpResponse::Ok().body(\\\"Logged in!\\\")\\n        },\\n        _ => HttpResponse::BadRequest().body(\\\"Invalid username or password\\\"),\\n    }\\n}\\n\\n#[actix_web::main]\\nasync fn main() -> std::io::Result<()> {\\n    let db = match Database::load_from_file() {\\n        Ok(db) => db,\\n        Err(_) => Database::new(),\\n    };\\n\\n    let data = web::Data::new(AppState {\\n        db: Mutex::new(db),\\n        client: Client::new(),\\n    });\\n\\n    HttpServer::new(move || {\\n        App::new()\\n            .wrap(\\n                Cors::permissive()\\n                    .allowed_origin_fn(|origin, _req_head| {\\n                        origin.as_bytes().starts_with(b\\\"http://localhost:\\\") || origin == \\\"null\\\"\\n                    })\\n                    .allowed_methods(vec![\\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"DELETE\\\"])\\n                    .allowed_headers(vec![header::AUTHORIZATION, header::ACCEPT])\\n                    .allowed_header(header::CONTENT_TYPE)\\n                    .supports_credentials()\\n                    .max_age(3600),\\n            )\\n            .app_data(data.clone())\\n            .route(\\\"/fitness_progress\\\", web::post().to(create_fitness_progress))\\n            .route(\\\"/fitness_progress\\\", web::get().to(read_all_fitness_progress))\\n            .route(\\\"/fitness_progress/{id}\\\", web::get().to(read_fitness_progress))\\n            .route(\\\"/fitness_progress/{id}\\\", web::put().to(update_fitness_progress))\\n            .route(\\\"/fitness_progress/{id}\\\", web::delete().to(delete_fitness_progress))\\n            .route(\\\"/register\\\", web::post().to(register))\\n            .route(\\\"/login\\\", web::post().to(login))\\n            .route(\\\"/exercises\\\", web::get().to(fetch_exercise_data))\\n    })\\n    .bind(\\\"127.0.0.1:8080\\\")?\\n    .run()\\n    .await\\n}\",\"api_endpoint_schema\":[{\"is_route_dynamic\":\"false\",\"method\":\"get\",\"request_body\":\"None\",\"response\":\"not_provided\",\"route\":\"/fitness_progress\"},{\"is_route_dynamic\":\"false\",\"method\":\"get\",\"request_body\":\"None\",\"response\":\"not_provided\",\"route\":\"/exercises\"}]}"

"{\"pages\":[\"home_page\",\"dashboard\"],\"pages_descriptons\":[{\"page_name\":\"home_page\",\"suggested_content_sections\":{\"banner_section\":\"A bold and engaging banner with relevant visuals showcasing fitness progress tracking\",\"features_section\":\"Highlight various features of the fitness tracking website, such as timezone support, goal setting, and personalized insights\",\"testimonial_section\":\"Display testimonials from satisfied users who successfully achieved their fitness goals through the platform\"}},{\"page_name\":\"dashboard\",\"suggested_content_sections\":{\"exercise_section\":\"Display a list of available exercises and allow users to search and filter through them\",\"goal_setting_section\":\"An interactive section for users to set their fitness goals and track their progress towards achieving them\",\"user_data_section\":\"A user data section displaying fitness progress summaries, such as total workouts completed, calories burnt, goal completion percentage, and progress over time\"}}],\"api_assignments\":{\"home_page\":[{\"api_route\":\"/fitness_progress\",\"method\":\"get\",\"route_type\":\"internal\"},{\"api_route\":\"/exercises\",\"method\":\"get\",\"route_type\":\"internal\"},{\"api_route\":\"https://wger.de/api/v2/exercise\",\"method\":\"get\",\"route_type\":\"external\"},{\"api_route\":\"https://wger.de/api/v2/exercisecategory\",\"method\":\"get\",\"route_type\":\"external\"},{\"api_route\":\"https://wger.de/api/v2/muscle\",\"method\":\"get\",\"route_type\":\"external\"}],\"dashboard\":[{\"api_route\":\"/fitness_progress\",\"method\":\"post\",\"route_type\":\"internal\"},{\"api_route\":\"/fitness_progress/{id}\",\"method\":\"get\",\"route_type\":\"internal\"},{\"api_route\":\"/fitness_progress/{id}\",\"method\":\"put\",\"route_type\":\"internal\"},{\"api_route\":\"/fitness_progress/{id}\",\"method\":\"delete\",\"route_type\":\"internal\"},{\"api_route\":\"/register\",\"method\":\"post\",\"route_type\":\"internal\"},{\"api_route\":\"/login\",\"method\":\"post\",\"route_type\":\"internal\"}]},\"brand_colours\":[\"#32a852\",\"#0fa0d1\",\"#d10fcb\"],\"build_mode\":\"Infrastructure\"}"